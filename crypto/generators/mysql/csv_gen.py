#!/usr/bin/env python
import sys
import getopt
from time import time
import re
'''
__author__="David Busby"
__copyright__="David Busby <d.busby@saiweb.co.uk>"
__license__="GNU v3 + part 5d section 7: Redistribution/Reuse of this code is permitted under the GNU v3 license, as an additional term ALL code must carry the original Author(s) credit in comment form."
'''

try:
	import hashlib
except:
	print 'Your python version does not include hashlib, importing sha instead'
	import sha as hashlib
try:
	import multiprocessing
except:
	print 'This script requires the multiprocessing lib to function, included in python 2.6+ or available from pypi for 2.5'
	sys.exit(1)

class opts:
    slen = 0

def usage():
	print sys.argv[0],'-f /path/to/wordlist.txt -o /output/path/to/rainbow_table.txt -t <max threads, default 1> [-l optional use legacy hash]'

#pilfered from: http://djangosnippets.org/snippets/1508/
def old_hash(word):
	nr = 1345345333
	add = 7
	nr2 = 0x12345671
	for c in (ord(x) for x in word if x not in (' ', '\t')):
        	nr^= (((nr & 63)+add)*c)+ (nr << 8) & 0xFFFFFFFF
        	nr2= (nr2 + ((nr2 << 8) ^ nr)) & 0xFFFFFFFF
        	add= (add + c) & 0xFFFFFFFF
	
	return {"%08x%08x" % (nr & 0x7FFFFFFF,nr2 & 0x7FFFFFFF):word}

def hash(word):
	word = re.subn('\r','',word)[0]
	word = re.subn('\n','',word)[0]
	pass1 = hashlib.sha1(word).digest()
	pass2 = hashlib.sha1(pass1).hexdigest()
	return {"*%s"%pass2.upper():word}

def progress(str):
        str = " %s" % str

        while len(str) < opts.slen:
            str = '%s ' % str
        opts.slen = len(str)
        sys.stdout.write(str + '\r')
        sys.stdout.flush()

def main():
	try:
		opts,args = getopt.getopt(sys.argv[1:],'f:o:t:l',[])
	except getopt.GetoptError, e:
		print e
		usage()
		sys.exit(2)
	
	wlist   = None
	ofile   = None
	threads = 2
	legacy = False
	for o,a in opts:
		if o == '-f':
			wlist = a
		elif o == '-o':
			ofile = a
                elif o == '-t':
                        threads = int(a)
		elif o == '-l':
			legacy = True
                else:
                    assert False,'Unsupported option %s' %a
	
	if ofile == None:
		print 'Output file not specified, exiting'
		sys.exit(2)
	if wlist == None:
		print 'Wordlist file not specified exiting'
		sys.exit(2)

	p = multiprocessing.Pool(processes=threads)

	i = 0
	words = []
        print 'Please wait getting reading wordlist from %s' %wlist
	for word in open(wlist,'r'):
		words.append(word)
		i+=1
                progress('%d words'%i)

	print 'Got %d words from file, processing' % i
	sTime = time()
	if legacy == False:
		data = p.map(hash,words)
	else:
		data = p.map(old_hash,words)

	eTime = time()
	print 'Completed hashing of %d words in %.2f seconds (%.2f/s) using %d threads' % (i,(eTime-sTime),(i/(eTime-sTime)),threads)
	
	f = open(ofile,'w+')
	for dict in data:
		for hashmap in dict:
			str = '%s,%s' % (hashmap,dict[hashmap])
			f.write(str)
	f.close()
	
	print 'csv format is complete %s' %ofile

if __name__ == '__main__':
	main()
